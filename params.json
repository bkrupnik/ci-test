{"name":"Ci-test","tagline":"Repo for testing CI process","body":"Basic Commands\r\n==============\r\n    cd someproject\r\n    git init                      # Turn this directory into a git directory\r\n    git add .                     # Take a git snapshot of all the files in this directory, add them to a git index\r\n    git rm somefile               # Remove file from index and file system\r\n    git rm --cached               # Remove file from index ONLY\r\n    git add file1 file2 file3     # Add updated files to the git index\r\n    git commit                    # Save the current state of the git index, this will prompt you for a message\r\n    git commit -a                 # Save all files, edited/deleted in the current state of the git index, this will prompt you for a message\r\n    git diff                      # See what pending changes that will be made in the next commit\r\n    git diff --cached             # See what changes will be made in the next commit\r\n    git status                    # Get a brief summary about changes to the index, etc.\r\n    git log                       # View history of your changes\r\n    git log -p                    # View changes at each commit\r\n    git log --stat --summary      # Get an overview of the changes in each commit\r\n    git revert [commit number]    # Revert back to a particular version\r\n\r\nBranch Management\r\n===================\r\n    git branch                    # See all branches of development\r\n    git branch new_version        # Create a new branch of development\r\n    git checkout new_version      # Switch to the new branch\r\n    git merge new_version         # Merge the changes from new_version into the master branch\r\n    git diff                      # If there's any conflicts with the merge, they'll show up here\r\n    git commit                    # Commit the merge!\r\n    gitk                          # Shows a representation of the merge\r\n    git branch -d new_version     # Delete the other branch, and ensure that the branch changes were merged\r\n    git branch -D stupid_version  # Delete a branch forever\r\n    git status                    # Show summary of pending commits\r\n\r\nCollaborative Commands\r\n====================  \r\n    git clone /path/to/some_other_project myproject     # Clone an existing project, including all branches(all non-master branches are hidden)\r\n    git branch -a                                       # Show all branches including hidden branches(which are usually stored in origin/[branch name]\r\n    git pull /path/to/some_other_project new_version    # Pull changes from an existing git repository and merge them into a branch\r\n    git fetch /path/to/some_other_project master        # Pull changes from an existing repository without merging\r\n    git log -p HEAD..FETCH_HEAD                         # Check the get log for differences between current version and fetched version\r\n    gitk HEAD..FETCH_HEAD                               # Nice visual representation between the two\r\n    git remote add some_other_project /path/other_proj  # Define a remote repository shortcut, stored in some_other_project/master\r\n    git fetch some_other_project                        # Import changes from remote repository\r\n    git merge some_other_project/master                 # Merge changes\r\n  \r\nOther Useful Commands\r\n=====================\r\n    git gc --aggressive           # Clean up git repository\r\n    git [any command] --help      # Get help with a command\r\n    git rm --cached filename      # Remove file from cache\r\n  \r\nGit Ignore\r\n============\r\n    git config --global core.excludesfile ~/.gitignore_global    # Add global git ignore file(with regexp support) to the index`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}